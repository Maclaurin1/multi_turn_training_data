{"instruction": "- 回答中最后一句话以省略号结尾。", "eval_func": [["def evaluate(response):\n    return response.endswith('...')", 1.0, [["这是一个测试...", true], ["请确保最后一句话以省略号结尾", false], ["这是一个测试。", false], ["这是另一个测试...", true], ["请确保最后一句话以省略号结尾...", true]]]], "cases": [["这是一个测试...", true], ["请确保最后一句话以省略号结尾", false], ["这是一个测试。", false], ["这是另一个测试...", true], ["请确保最后一句话以省略号结尾...", true]], "back_instruction": ["回答时请以'...'结尾。"], "nli_scores": ["entailment"]}
{"instruction": "- 回答中最后一句话以句号结尾。", "eval_func": [["def evaluate(response):\n    # 检查输入字符串是否以句号结尾\n    return response.endswith('。')", 1.0, [["这是另一个测试", false], ["这是一个包含标点符号的句子。", true], ["这是一个测试。", true], ["最后一句话没有句号", false], ["请确保最后一句话以句号结尾。", true]]]], "cases": [["这是另一个测试", false], ["这是一个包含标点符号的句子。", true], ["这是一个测试。", true], ["最后一句话没有句号", false], ["请确保最后一句话以句号结尾。", true]], "back_instruction": ["回答时请确保句子以句号结尾。"], "nli_scores": ["entailment"]}
{"instruction": "- 回答中每个段落前加\"***\"。", "eval_func": [["def evaluate(response):\n    # 检查每个段落是否以'***'开头\n    paragraphs = response.split('\\n')\n    for paragraph in paragraphs:\n        if paragraph and not paragraph.startswith('***'):\n            return False\n    return True", 1.0, [["***这是一个段落。\n***这是另一个段落。\n***这是第三个段落。", true], ["***这是一个段落。\n\n***这是另一个段落。", true], ["这是一个段落。\n***这是另一个段落。", false], ["***这是一个段落。\n***这是另一个段落。", true], ["***这是一个段落。\n这是另一个段落。", false]]]], "cases": [["***这是一个段落。\n***这是另一个段落。\n***这是第三个段落。", true], ["***这是一个段落。\n\n***这是另一个段落。", true], ["这是一个段落。\n***这是另一个段落。", false], ["***这是一个段落。\n***这是另一个段落。", true], ["***这是一个段落。\n这是另一个段落。", false]], "back_instruction": ["每个段落都必须以'***'开头。"], "nli_scores": ["entailment"]}
{"instruction": "- 回答中每个段落前加\"+++\"。", "eval_func": [["def evaluate(response):\n    paragraphs = response.split('\\n')\n    for paragraph in paragraphs:\n        if paragraph and not paragraph.startswith('+++'):\n            return False\n    return True", 1.0, [["+++这是第一段。\n+++这是第二段。\n+++这是第三段。", true], ["这是第一段。\n+++这是第二段。", false], ["+++这是第一段。\n这是第二段。", false], ["+++这是第一段。\n+++这是第二段。", true], ["+++这是第一段。\n\n+++这是第二段。", true]]]], "cases": [["+++这是第一段。\n+++这是第二段。\n+++这是第三段。", true], ["这是第一段。\n+++这是第二段。", false], ["+++这是第一段。\n这是第二段。", false], ["+++这是第一段。\n+++这是第二段。", true], ["+++这是第一段。\n\n+++这是第二段。", true]], "back_instruction": ["每段文字都必须以'+++'开头。"], "nli_scores": ["entailment"]}
{"instruction": "- 回答中每个段落前加\"|||\"。", "eval_func": [["def evaluate(response):\n    paragraphs = response.split('\\n')\n    for paragraph in paragraphs:\n        if not paragraph.startswith('|||'):\n            return False\n    return True", 1.0, [["|||这是第一段。\n|||这是第二段。\n这是第三段。", false], ["|||这是第一段。\n|||这是第二段。\n|||这是第三段。\n|||这是第四段。", true], ["|||这是第一段。\n这是第二段。\n|||这是第三段。", false], ["这是第一段。\n|||这是第二段。\n|||这是第三段。", false], ["|||这是第一段。\n|||这是第二段。\n|||这是第三段。", true]]]], "cases": [["|||这是第一段。\n|||这是第二段。\n这是第三段。", false], ["|||这是第一段。\n|||这是第二段。\n|||这是第三段。\n|||这是第四段。", true], ["|||这是第一段。\n这是第二段。\n|||这是第三段。", false], ["这是第一段。\n|||这是第二段。\n|||这是第三段。", false], ["|||这是第一段。\n|||这是第二段。\n|||这是第三段。", true]], "back_instruction": ["每段回答都必须以'|||'开头。"], "nli_scores": ["entailment"]}
{"instruction": "- 回答中每个段落前加\"---\"。", "eval_func": [["def evaluate(response):\n    paragraphs = response.split('\\n')\n    for paragraph in paragraphs:\n        if paragraph and not paragraph.startswith('---'):\n            return False\n    return True", 1.0, [["---这是第一段。\n---这是第二段。\n这是第三段。", false], ["---这是第一段。\n---这是第二段。\n---这是第三段。", true], ["---这是第一段。\n这是第二段。\n---这是第三段。", false], ["---这是第一段。\n---这是第二段。\n---这是第三段。\n", true], ["这是第一段。\n---这是第二段。\n---这是第三段。", false]]]], "cases": [["---这是第一段。\n---这是第二段。\n这是第三段。", false], ["---这是第一段。\n---这是第二段。\n---这是第三段。", true], ["---这是第一段。\n这是第二段。\n---这是第三段。", false], ["---这是第一段。\n---这是第二段。\n---这是第三段。\n", true], ["这是第一段。\n---这是第二段。\n---这是第三段。", false]], "back_instruction": ["回答时每段开头必须以'---'开头。"], "nli_scores": ["entailment"]}
{"instruction": "- 回答字数不多于100个字。", "eval_func": [["def evaluate(response):\n    return len(response) <= 100", 1.0, [["这是另一个测试案例，字数刚好100个字。为了确保这个测试案例确实是100个字，我们需要非常小心地计算每一个字。这样一来，我们就可以测试evaluate函数是否能够正确识别并返回True。", true], ["这是一个测试案例，字数不超过100个字。", true], ["简短的测试。", true]]]], "cases": [["这是另一个测试案例，字数刚好100个字。为了确保这个测试案例确实是100个字，我们需要非常小心地计算每一个字。这样一来，我们就可以测试evaluate函数是否能够正确识别并返回True。", true], ["这是一个测试案例，字数不超过100个字。", true], ["简短的测试。", true]], "back_instruction": ["回答时请确保您的回答不超过100个字符。"], "nli_scores": ["entailment"]}
{"instruction": "- 回答字数不多于200个字。", "eval_func": [["def evaluate(response):\n    # 计算输入字符串的字数\n    word_count = len(response)\n    # 检查字数是否不多于200个字\n    return word_count <= 200", 1.0, [["这是一个测试案例，字数不多于200个字。", true], ["这是一个非常长的测试案例，字数超过了200个字。为了确保这个测试案例确实超过了200个字，我们需要继续添加更多的内容。Python是一种广泛使用的高级编程语言，具有简洁的语法和强大的功能。它被广泛应用于Web开发、数据分析、人工智能等领域。Python的设计哲学强调代码的可读性，使得程序员能够用更少的代码表达想法。Python的标准库非常丰富，提供了许多实用的模块和函数，极大地提高了开发效率。总之，Python是一种非常优秀的编程语言。", false]]]], "cases": [["这是一个测试案例，字数不多于200个字。", true], ["这是一个非常长的测试案例，字数超过了200个字。为了确保这个测试案例确实超过了200个字，我们需要继续添加更多的内容。Python是一种广泛使用的高级编程语言，具有简洁的语法和强大的功能。它被广泛应用于Web开发、数据分析、人工智能等领域。Python的设计哲学强调代码的可读性，使得程序员能够用更少的代码表达想法。Python的标准库非常丰富，提供了许多实用的模块和函数，极大地提高了开发效率。总之，Python是一种非常优秀的编程语言。", false]], "back_instruction": ["回答时字数不要超过200个字。"], "nli_scores": ["entailment"]}
{"instruction": "- 回答字数不少于50个字。", "eval_func": [["def evaluate(response):\n    # 计算输入字符串的长度\n    length = len(response)\n    # 判断长度是否不少于50个字\n    if length >= 50:\n        return True\n    else:\n        return False", 1.0, [["这是一个短的测试。", false], ["这个字符串的长度是四十九个字。这个字符串的长度是四十九个字。", false]]]], "cases": [["这是一个短的测试。", false], ["这个字符串的长度是四十九个字。这个字符串的长度是四十九个字。", false]], "back_instruction": ["回答时确保输入字符串的长度不少于50个字。"], "nli_scores": ["entailment"]}
{"instruction": "- 回答包含日期，格式为YYYY-MM-DD。", "eval_func": [["def evaluate(response):\n    import re\n    # 正则表达式匹配YYYY-MM-DD格式的日期\n    date_pattern = re.compile(r'\\b\\d{4}-\\d{2}-\\d{2}\\b')\n    # 查找所有匹配的日期\n    dates = date_pattern.findall(response)\n    # 如果找到至少一个匹配的日期，返回True，否则返回False\n    return bool(dates)", 1.0, [["请确认2023/12/01是否有空。", false], ["日期格式不正确：2023.10.05。", false], ["明天是2023年10月6日。", false]]]], "cases": [["请确认2023/12/01是否有空。", false], ["日期格式不正确：2023.10.05。", false], ["明天是2023年10月6日。", false]], "back_instruction": ["回答时包含至少一个YYYY-MM-DD格式的日期。"], "nli_scores": ["entailment"]}
{"instruction": "- 回答不包含“不好意思”这个词。", "eval_func": [["def evaluate(response):\n    return '不好意思' not in response", 1.0, [["请问还有其他问题吗？", true], ["对不起，我不能回答这个问题。", true], ["不好意思，我不知道答案。", false], ["不好意思，我需要更多信息。", false], ["谢谢您的提问。", true]]]], "cases": [["请问还有其他问题吗？", true], ["对不起，我不能回答这个问题。", true], ["不好意思，我不知道答案。", false], ["不好意思，我需要更多信息。", false], ["谢谢您的提问。", true]], "back_instruction": ["回答时不要使用包含'不好意思'的词语。"], "nli_scores": ["entailment"]}
{"instruction": "- 回答不包含“抱歉”这个词。", "eval_func": [["def evaluate(response):\n    return '抱歉' not in response", 1.0, [["很抱歉，暂时无法提供帮助。", false], ["请问还有其他问题吗？", true], ["谢谢你的理解。", true], ["抱歉，我不能帮你。", false], ["我会尽力帮助你。", true]]]], "cases": [["很抱歉，暂时无法提供帮助。", false], ["请问还有其他问题吗？", true], ["谢谢你的理解。", true], ["抱歉，我不能帮你。", false], ["我会尽力帮助你。", true]], "back_instruction": ["回答时不要使用包含'抱歉'的词语。"], "nli_scores": ["entailment"]}
{"instruction": "- 回答不包含“好的”这个词。", "eval_func": [["def evaluate(response):\n    return '好的' not in response", 1.0, [["好的，我明白了。", false], ["好的，谢谢。", false], ["请问还有其他问题吗？", true], ["这是一个测试。", true], ["这真是太棒了！", true]]]], "cases": [["好的，我明白了。", false], ["好的，谢谢。", false], ["请问还有其他问题吗？", true], ["这是一个测试。", true], ["这真是太棒了！", true]], "back_instruction": ["回答时不要使用包含'好的'的词语。"], "nli_scores": ["entailment"]}
{"instruction": "- 回答不包含“AI”这个词。", "eval_func": [["def evaluate(response):\n    return 'AI' not in response", 1.0, [["这个回答包含了AI这个词。", false], ["这个回答包含了ai这个词。", true], ["这个回答包含了人工智能这个词。", true], ["这个回答没有包含那个词。", true], ["这个回答没有包含那个词，完全符合要求。", true]]]], "cases": [["这个回答包含了AI这个词。", false], ["这个回答包含了ai这个词。", true], ["这个回答包含了人工智能这个词。", true], ["这个回答没有包含那个词。", true], ["这个回答没有包含那个词，完全符合要求。", true]], "back_instruction": ["回答时不要使用包含'AI'的内容。"], "nli_scores": ["entailment"]}
{"instruction": "- 回答包含“大模型”这个词。", "eval_func": [["def evaluate(response):\n    return '大模型' in response", 1.0, [["我们需要更多的信息来判断。", false], ["这个回答没有包含指定的词。", false], ["大模型是一个非常重要的概念。", true], ["这个回答包含大模型这个词。", true], ["在机器学习中，大模型通常指的是参数非常多的模型。", true]]]], "cases": [["我们需要更多的信息来判断。", false], ["这个回答没有包含指定的词。", false], ["大模型是一个非常重要的概念。", true], ["这个回答包含大模型这个词。", true], ["在机器学习中，大模型通常指的是参数非常多的模型。", true]], "back_instruction": ["回答时要包含'大模型'。"], "nli_scores": ["entailment"]}
{"instruction": "- 回答包含“我是AI大模型”这个词。", "eval_func": [["def evaluate(response):\n    return \"我是AI大模型\" in response", 1.0, [["我是AI模型，请问有什么可以帮忙的吗？", false], ["请问你是AI大模型吗？", false], ["你好，我是AI大模型，可以帮助你解决问题。", true], ["你好，我是一个AI模型，可以帮助你解决问题。", false], ["我是AI大模型，请问有什么可以帮忙的吗？", true]]]], "cases": [["我是AI模型，请问有什么可以帮忙的吗？", false], ["请问你是AI大模型吗？", false], ["你好，我是AI大模型，可以帮助你解决问题。", true], ["你好，我是一个AI模型，可以帮助你解决问题。", false], ["我是AI大模型，请问有什么可以帮忙的吗？", true]], "back_instruction": ["回答时要包含'我是AI大模型'。"], "nli_scores": ["entailment"]}
{"instruction": "- 回答包含“综上所述”这个词。", "eval_func": [["def evaluate(response):\n    return \"综上所述\" in response", 1.0, [["综上所述，这个问题的解决方案是可行的。", true], ["这个问题的解决方案是可行的。", false], ["我们可以得出结论，这个方法是有效的。", false], ["经过分析，我们得出结论：综上所述，这个方法是有效的。", true], ["综上所述，我们可以继续进行下一步。", true]]]], "cases": [["综上所述，这个问题的解决方案是可行的。", true], ["这个问题的解决方案是可行的。", false], ["我们可以得出结论，这个方法是有效的。", false], ["经过分析，我们得出结论：综上所述，这个方法是有效的。", true], ["综上所述，我们可以继续进行下一步。", true]], "back_instruction": ["回答时要包含短语'综上所述'。"], "nli_scores": ["entailment"]}
{"instruction": "- 回答包含“温馨提示”这个词。", "eval_func": [["def evaluate(response):\n    return \"温馨提示\" in response", 1.0, [["请注意，这里有一个重要信息。", false], ["这是一个温馨提示，请注意。", true], ["温馨提示：请保持安静。", true], ["提示：请保持安静。", false], ["温馨提示：今天有雨，请带伞。", true]]]], "cases": [["请注意，这里有一个重要信息。", false], ["这是一个温馨提示，请注意。", true], ["温馨提示：请保持安静。", true], ["提示：请保持安静。", false], ["温馨提示：今天有雨，请带伞。", true]], "back_instruction": ["回答时包含'温馨提示'。"], "nli_scores": ["entailment"]}
{"instruction": "- 回答以“谢谢！”结尾。", "eval_func": [["def evaluate(response):\n    return response.endswith('谢谢！')", 1.0, [["谢谢！", true], ["谢谢", false], ["您的帮助非常有用，谢谢！", true], ["这真是太棒了，谢谢！", true], ["感谢您的帮助", false]]]], "cases": [["谢谢！", true], ["谢谢", false], ["您的帮助非常有用，谢谢！", true], ["这真是太棒了，谢谢！", true], ["感谢您的帮助", false]], "back_instruction": ["回答时以'谢谢！'结尾。"], "nli_scores": ["entailment"]}
{"instruction": "- 回答以“这就是我的回答。”结尾。", "eval_func": [["def evaluate(response):\n    return response.endswith('这就是我的回答。')", 1.0, [["这就是我的回答。", true], ["这是一个测试。这不是我的回答。", false], ["这不是我的回答。这就是我的回答", false], ["回答完毕。这就是我的回答。", true], ["这是一个测试。这就是我的回答。", true]]]], "cases": [["这就是我的回答。", true], ["这是一个测试。这不是我的回答。", false], ["这不是我的回答。这就是我的回答", false], ["回答完毕。这就是我的回答。", true], ["这是一个测试。这就是我的回答。", true]], "back_instruction": ["回答时以'这就是我的回答。'结尾。"], "nli_scores": ["entailment"]}
{"instruction": "- 回答以“你觉得呢？”结尾。", "eval_func": [["def evaluate(response):\n    return response.strip().endswith('你觉得呢？')", 1.0, [["你觉得呢？ ", true], ["你觉得呢", false], ["这是一个测试，你觉得呢", false], ["这是一个测试，你觉得呢？", true], ["你怎么看？", false], ["这是一个测试，你觉得呢？ ", true], ["这是一个测试。", false], ["你觉得呢？", true]]]], "cases": [["你觉得呢？ ", true], ["你觉得呢", false], ["这是一个测试，你觉得呢", false], ["这是一个测试，你觉得呢？", true], ["你怎么看？", false], ["这是一个测试，你觉得呢？ ", true], ["这是一个测试。", false], ["你觉得呢？", true]], "back_instruction": ["回答时请以'你觉得呢？'结尾。"], "nli_scores": ["entailment"]}
{"instruction": "- 回答以“我回答好了！”结尾。", "eval_func": [["def evaluate(response):\n    return response.endswith('我回答好了！')", 1.0, [["这是一个测试。我回答好了！", true], ["这是另一个测试。我回答好了", false], ["我回答好了！这是一个测试。", false], ["这是一个测试。", false], ["我回答好了！", true]]]], "cases": [["这是一个测试。我回答好了！", true], ["这是另一个测试。我回答好了", false], ["我回答好了！这是一个测试。", false], ["这是一个测试。", false], ["我回答好了！", true]], "back_instruction": ["回答时以'我回答好了！'结尾。"], "nli_scores": ["entailment"]}
{"instruction": "- 用数字编号的方式回答，每个段落用逗号隔开。", "eval_func": [["def evaluate(response):\n    import re\n    # 检查是否以数字编号开头\n    if not re.match(r'^\\d+\\.\\s', response):\n        return False\n    # 检查每个段落是否用逗号隔开\n    paragraphs = response.split(',')\n    for paragraph in paragraphs:\n        if not re.match(r'^\\d+\\.\\s', paragraph.strip()):\n            return False\n    return True", 1.0, [["1. 这是第一段,2. 这是第二段,这是第三段", false], ["1. 这是第一段,2. 这是第二段,3. 这是第三段", true], ["1.这是第一段,2.这是第二段,3.这是第三段", false], ["1. 这是第一段, 2. 这是第二段, 3. 这是第三段", true]]]], "cases": [["1. 这是第一段,2. 这是第二段,这是第三段", false], ["1. 这是第一段,2. 这是第二段,3. 这是第三段", true], ["1.这是第一段,2.这是第二段,3.这是第三段", false], ["1. 这是第一段, 2. 这是第二段, 3. 这是第三段", true]], "back_instruction": ["回答时每个段落都要以数字编号开头，并用逗号隔开。"], "nli_scores": ["entailment"]}
{"instruction": "- 用字母编号的方式回答，每个段落用分号隔开。", "eval_func": [["def evaluate(response):\n    import re\n    # 检查是否以字母编号的方式回答\n    pattern = re.compile(r'^[a-zA-Z]\\. .+?(;|$)')\n    # 分割段落\n    paragraphs = response.split(';')\n    for paragraph in paragraphs:\n        paragraph = paragraph.strip()\n        if paragraph and not pattern.match(paragraph):\n            return False\n    return True", 1.0, [["a. 这是第一个段落; 这是第二个段落; c. 这是第三个段落;", false], ["a. 这是第一个段落; b. 这是第二个段落; c. 这是第三个段落", true], ["a. 这是第一个段落; b. 这是第二个段落; c. 这是第三个段落; d. 这是第四个段落;", true], ["a. 这是第一个段落; b. 这是第二个段落; c. 这是第三个段落;", true]]]], "cases": [["a. 这是第一个段落; 这是第二个段落; c. 这是第三个段落;", false], ["a. 这是第一个段落; b. 这是第二个段落; c. 这是第三个段落", true], ["a. 这是第一个段落; b. 这是第二个段落; c. 这是第三个段落; d. 这是第四个段落;", true], ["a. 这是第一个段落; b. 这是第二个段落; c. 这是第三个段落;", true]], "back_instruction": ["回答时每段开头必须以字母编号的方式（如'A. '）开始，并以分号结束。"], "nli_scores": ["entailment"]}
{"instruction": "- 用大写字母编号的方式回答，每个项目用逗号隔开。", "eval_func": [["def evaluate(response):\n    import re\n    # 正则表达式匹配模式\n    pattern = r'^[A-Z]+\\. .+(, [A-Z]+\\. .+)*$'\n    # 使用正则表达式进行匹配\n    return bool(re.match(pattern, response))", 1.0, [["A. 项目一, B. 项目二, C. 项目三, D. 项目四, E. 项目五", true], ["A. 项目一, B. 项目二, C. 项目三", true], ["A. 项目一, B. 项目二, C. 项目三, D. 项目四", true]]]], "cases": [["A. 项目一, B. 项目二, C. 项目三, D. 项目四, E. 项目五", true], ["A. 项目一, B. 项目二, C. 项目三", true], ["A. 项目一, B. 项目二, C. 项目三, D. 项目四", true]], "back_instruction": ["回答时请使用以下格式：每个句子以大写字母开头，句子之间用逗号分隔。"], "nli_scores": ["entailment"]}
{"instruction": "- 用罗马数字编号的方式回答，每个项目用分号隔开。", "eval_func": [["def evaluate(response):\n    import re\n    # 正则表达式匹配罗马数字编号的项目\n    pattern = r'^(I|II|III|IV|V|VI|VII|VIII|IX|X)(; (I|II|III|IV|V|VI|VII|VIII|IX|X))*$'\n    # 去除首尾空格\n    response = response.strip()\n    # 检查是否匹配模式\n    if re.match(pattern, response):\n        return True\n    else:\n        return False", 1.0, [["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX; XX; XXI; XXII; XXIII; XXIV; XXV; XXVI; XXVII", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX; XX; XXI", false], ["I; II; III; IV; V; VI", true], ["I; II; III", true], ["I; II; III; IV; V; VI; VII; VIII; IX; XI", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX; XX; XXI; XXII; XXIII; XXIV; XXV; XXVI", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX; XX; XXI; XXII; XXIII; XXIV; XXV; XXVI; XXVII; XXVIII; XXIX; XXX", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X", true], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX; XX; XXI; XXII; XXIII", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX; XX; XXI; XXII; XXIII; XXIV", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX; XX; XXI; XXII; XXIII; XXIV; XXV; XXVI; XXVII; XXVIII", false], ["I; II; III; IV; V; VI; VII", true], ["I; II; III; IV", true], ["I; II; III; IV; V; VI; VII; VIII", true], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX; XX; XXI; XXII; XXIII; XXIV; XXV; XXVI; XXVII; XXVIII; XXIX", false], ["I; II; III; IV; V", true], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX; XX", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII", false], ["I; II; III; IV; V; VI; VII; VIII; IX", true], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX; XX; XXI; XXII; XXIII; XXIV; XXV", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX; XX; XXI; XXII", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV", false]]]], "cases": [["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX; XX; XXI; XXII; XXIII; XXIV; XXV; XXVI; XXVII", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX; XX; XXI", false], ["I; II; III; IV; V; VI", true], ["I; II; III", true], ["I; II; III; IV; V; VI; VII; VIII; IX; XI", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX; XX; XXI; XXII; XXIII; XXIV; XXV; XXVI", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX; XX; XXI; XXII; XXIII; XXIV; XXV; XXVI; XXVII; XXVIII; XXIX; XXX", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X", true], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX; XX; XXI; XXII; XXIII", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX; XX; XXI; XXII; XXIII; XXIV", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX; XX; XXI; XXII; XXIII; XXIV; XXV; XXVI; XXVII; XXVIII", false], ["I; II; III; IV; V; VI; VII", true], ["I; II; III; IV", true], ["I; II; III; IV; V; VI; VII; VIII", true], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX; XX; XXI; XXII; XXIII; XXIV; XXV; XXVI; XXVII; XXVIII; XXIX", false], ["I; II; III; IV; V", true], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX; XX", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII", false], ["I; II; III; IV; V; VI; VII; VIII; IX", true], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX; XX; XXI; XXII; XXIII; XXIV; XXV", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII; XIX; XX; XXI; XXII", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII; XVIII", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI; XVII", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV; XVI", false], ["I; II; III; IV; V; VI; VII; VIII; IX; X; XI; XII; XIII; XIV; XV", false]], "back_instruction": ["回答时使用罗马数字编号的项目，并用分号分隔。"], "nli_scores": ["entailment"]}
{"instruction": "- 回复中的每个句子都以相同的字开头。", "eval_func": [["def evaluate(response):\n    sentences = response.split('。')\n    if len(sentences) <= 1:\n        return True\n    first_char = sentences[0][0]\n    for sentence in sentences:\n        if sentence and sentence[0] != first_char:\n            return False\n    return True", 1.0, [["明天我们去爬山。天气也很好。", false], ["今天是个好日子。今天我们去公园玩。今天的天气很好。", true], ["今天是个好日子。我们去公园玩。今天的天气很好。", false], ["这是一个测试。", true], ["明天我们去爬山。明天的天气也很好。", true]]]], "cases": [["明天我们去爬山。天气也很好。", false], ["今天是个好日子。今天我们去公园玩。今天的天气很好。", true], ["今天是个好日子。我们去公园玩。今天的天气很好。", false], ["这是一个测试。", true], ["明天我们去爬山。明天的天气也很好。", true]], "back_instruction": ["回答时每个句子的第一个字必须相同。"], "nli_scores": ["entailment"]}
{"instruction": "- 以XML格式输出。", "eval_func": [["def evaluate(response):\n    import xml.etree.ElementTree as ET\n    try:\n        ET.fromstring(response)\n        return True\n    except ET.ParseError:\n        return False", 1.0, [["<root><child>内容</child>", false], ["这不是XML格式的内容", false], ["<root><child>内容</child></root><extra>多余的内容</extra>", false], ["<root><child>内容</child></root>", true]]]], "cases": [["<root><child>内容</child>", false], ["这不是XML格式的内容", false], ["<root><child>内容</child></root><extra>多余的内容</extra>", false], ["<root><child>内容</child></root>", true]], "back_instruction": ["确保您的回答是有效的XML格式。"], "nli_scores": ["neutral"]}
{"instruction": "- 以CSV格式输出。", "eval_func": [["def evaluate(response):\n    # 检查是否包含换行符\n    if '\\n' in response:\n        return False\n    # 检查是否包含逗号\n    if ',' not in response:\n        return False\n    # 检查是否每行有相同数量的逗号\n    lines = response.split('\\n')\n    num_commas = lines[0].count(',')\n    for line in lines:\n        if line.count(',') != num_commas:\n            return False\n    return True", 1.0, [["name,age,city\\nAlice,30,New York\\nBob,25,Los Angeles\\n", true], ["name,age,city\\nAlice,30,New York\\nBob,25,Los Angeles", true], ["name;age;city\\nAlice;30;New York\\nBob;25;Los Angeles", false]]]], "cases": [["name,age,city\\nAlice,30,New York\\nBob,25,Los Angeles\\n", true], ["name,age,city\\nAlice,30,New York\\nBob,25,Los Angeles", true], ["name;age;city\\nAlice;30;New York\\nBob;25;Los Angeles", false]], "back_instruction": ["回答时不要包含换行符。", "回答时必须包含逗号。", "每行的逗号数量必须相同。"], "nli_scores": ["neutral", "neutral", "neutral"]}
{"instruction": "- 以YAML格式输出。", "eval_func": [["import yaml\n\ndef evaluate(response: str) -> bool:\n    try:\n        yaml.safe_load(response)\n        return True\n    except yaml.YAMLError:\n        return False", 1.0, [["name: 赵六\nage: 22\naddress: 成都市\nhobbies: [reading, swimming]", true], ["name: 王五\nage: 28\naddress: 广州市\nhobbies:\n  - reading\n  - swimming", true], ["name: 张三\nage: 25\naddress: 北京市\n- item1\n- item2", false], ["name: 李四\nage: 30\naddress: 上海市", true], ["name: 张三\nage: 25\naddress: 北京市", true]]]], "cases": [["name: 赵六\nage: 22\naddress: 成都市\nhobbies: [reading, swimming]", true], ["name: 王五\nage: 28\naddress: 广州市\nhobbies:\n  - reading\n  - swimming", true], ["name: 张三\nage: 25\naddress: 北京市\n- item1\n- item2", false], ["name: 李四\nage: 30\naddress: 上海市", true], ["name: 张三\nage: 25\naddress: 北京市", true]], "back_instruction": ["确保您的回答是有效的YAML格式。"], "nli_scores": ["neutral"]}
{"instruction": "- 以HTML表格格式输出。", "eval_func": [["def evaluate(response):\n    import re\n    # 检查是否以 <table> 开始并以 </table> 结束\n    if not response.strip().startswith('<table>') or not response.strip().endswith('</table>'):\n        return False\n    # 检查是否包含至少一个 <tr> 和 </tr>\n    if not re.search(r'<tr>.*?</tr>', response, re.DOTALL):\n        return False\n    # 检查是否包含至少一个 <td> 和 </td>\n    if not re.search(r'<td>.*?</td>', response, re.DOTALL):\n        return False\n    return True", 1.0, [["<table><tr><td>内容</td></tr></table><p>其他内容</p>", false], ["<table><tr><td>内容</td></tr></table>", true], ["<div><tr><td>内容</td></tr></div>", false], ["<table><tr><td>内容</td></tr>", false], ["<table><tr><td>内容</td></tr><tr><td>更多内容</td></tr></table>", true]]]], "cases": [["<table><tr><td>内容</td></tr></table><p>其他内容</p>", false], ["<table><tr><td>内容</td></tr></table>", true], ["<div><tr><td>内容</td></tr></div>", false], ["<table><tr><td>内容</td></tr>", false], ["<table><tr><td>内容</td></tr><tr><td>更多内容</td></tr></table>", true]], "back_instruction": ["确保响应以 <table> 开始并以 </table> 结束。", "确保响应包含至少一个 <tr> 和 </tr>。", "确保响应包含至少一个 <td> 和 </td>。"], "nli_scores": ["neutral", "neutral", "neutral"]}
{"instruction": "- 每个段落都以“因为”字开头。", "eval_func": [["def evaluate(response):\n    paragraphs = response.split('\\n')\n    for paragraph in paragraphs:\n        if not paragraph.startswith('因为'):\n            return False\n    return True", 1.0, [["因为这是唯一的段落。", true], ["因为这是第一个段落。\n这是第二个段落。", false], ["因为这是第一个段落。\n因为这是第二个段落。\n因为这是第三个段落。", true], ["因为这是第一个段落。\n因为这是第二个段落。", true], ["这是第一个段落。\n因为这是第二个段落。", false]]]], "cases": [["因为这是唯一的段落。", true], ["因为这是第一个段落。\n这是第二个段落。", false], ["因为这是第一个段落。\n因为这是第二个段落。\n因为这是第三个段落。", true], ["因为这是第一个段落。\n因为这是第二个段落。", true], ["这是第一个段落。\n因为这是第二个段落。", false]], "back_instruction": ["每段话都要以'因为'开头。"], "nli_scores": ["entailment"]}
{"instruction": "- 每个段落都以“虽然”字开头。", "eval_func": [["def evaluate(response):\n    paragraphs = response.split('\\n')\n    for paragraph in paragraphs:\n        if not paragraph.startswith('虽然'):\n            return False\n    return True", 1.0, [["虽然天气很好，但我还是决定在家里休息。\n虽然我很喜欢出去玩，但今天我有很多工作要做。\n今天是周末，但我还是要加班。", false], ["虽然天气很好，但我还是决定在家里休息。\n虽然我很喜欢出去玩，但今天我有很多工作要做。", true], ["虽然天气很好，但我还是决定在家里休息。\n虽然我很喜欢出去玩，但今天我有很多工作要做。\n虽然今天是周末，但我还是要加班。", true], ["虽然天气很好，但我还是决定在家里休息。\n我很喜欢出去玩，但今天我有很多工作要做。", false], ["天气很好，但我还是决定在家里休息。\n虽然我很喜欢出去玩，但今天我有很多工作要做。", false]]]], "cases": [["虽然天气很好，但我还是决定在家里休息。\n虽然我很喜欢出去玩，但今天我有很多工作要做。\n今天是周末，但我还是要加班。", false], ["虽然天气很好，但我还是决定在家里休息。\n虽然我很喜欢出去玩，但今天我有很多工作要做。", true], ["虽然天气很好，但我还是决定在家里休息。\n虽然我很喜欢出去玩，但今天我有很多工作要做。\n虽然今天是周末，但我还是要加班。", true], ["虽然天气很好，但我还是决定在家里休息。\n我很喜欢出去玩，但今天我有很多工作要做。", false], ["天气很好，但我还是决定在家里休息。\n虽然我很喜欢出去玩，但今天我有很多工作要做。", false]], "back_instruction": ["每段话都要以'虽然'开头。"], "nli_scores": ["entailment"]}
{"instruction": "- 每个段落都以“所以”字开头。", "eval_func": [["def evaluate(response):\n    paragraphs = response.split('\\n')\n    for paragraph in paragraphs:\n        if not paragraph.startswith('所以'):\n            return False\n    return True", 1.0, [["所以这是唯一一段。", true], ["所以这是第一段。\n这是第二段。", false], ["所以这是第一段。\n所以这是第二段。", true], ["这是第一段。\n所以这是第二段。", false], ["所以这是第一段。\n所以这是第二段。\n所以这是第三段。", true]]]], "cases": [["所以这是唯一一段。", true], ["所以这是第一段。\n这是第二段。", false], ["所以这是第一段。\n所以这是第二段。", true], ["这是第一段。\n所以这是第二段。", false], ["所以这是第一段。\n所以这是第二段。\n所以这是第三段。", true]], "back_instruction": ["每段话都要以'所以'开头。"], "nli_scores": ["entailment"]}
{"instruction": "- 回复中的每个句子必须包含一个网址。", "eval_func": [["def evaluate(response):\n    import re\n    sentences = response.split('。')\n    url_pattern = re.compile(r'https?://(?:[-\\w.]|(?:%[\\da-fA-F]{2}))+')\n    for sentence in sentences:\n        if sentence.strip() and not url_pattern.search(sentence):\n            return False\n    return True", 1.0, [["这是一个测试句子https://example.com。另一个测试句子https://example.org。", true], ["https://example.com。https://example.org。", true], ["https://example.com。 这是一个测试句子https://example.org。", true], ["这是一个测试句子https://example.com。另一个测试句子没有网址。", false], ["这是一个测试句子。另一个测试句子https://example.org。", false]]]], "cases": [["这是一个测试句子https://example.com。另一个测试句子https://example.org。", true], ["https://example.com。https://example.org。", true], ["https://example.com。 这是一个测试句子https://example.org。", true], ["这是一个测试句子https://example.com。另一个测试句子没有网址。", false], ["这是一个测试句子。另一个测试句子https://example.org。", false]], "back_instruction": ["回答时每个句子都必须包含一个URL。"], "nli_scores": ["entailment"]}
{"instruction": "- 每个句子都以“假如……那么……”的结构展开。", "eval_func": [["def evaluate(response):\n    sentences = response.split('。')\n    for sentence in sentences:\n        if sentence.strip():  # 忽略空句子\n            if not sentence.strip().startswith('假如') or '那么' not in sentence:\n                return False\n    return True", 1.0, [["假如你今天早起，那么你就能赶上早班车。假如你努力学习，那么你就能取得好成绩。假如你多运动，那么你就会更健康。", true], ["假如你今天早起，那么你就能赶上早班车。假如你努力学习，你就能取得好成绩。", false], ["假如你今天早起，那么你就能赶上早班车。假如你努力学习，那么你就能取得好成绩。", true], ["假如你今天早起，那么你就能赶上早班车。你努力学习，那么你就能取得好成绩。", false], ["假如你今天早起，那么你就能赶上早班车。假如你努力学习，那么你就能取得好成绩。多运动，那么你就会更健康。", false]]]], "cases": [["假如你今天早起，那么你就能赶上早班车。假如你努力学习，那么你就能取得好成绩。假如你多运动，那么你就会更健康。", true], ["假如你今天早起，那么你就能赶上早班车。假如你努力学习，你就能取得好成绩。", false], ["假如你今天早起，那么你就能赶上早班车。假如你努力学习，那么你就能取得好成绩。", true], ["假如你今天早起，那么你就能赶上早班车。你努力学习，那么你就能取得好成绩。", false], ["假如你今天早起，那么你就能赶上早班车。假如你努力学习，那么你就能取得好成绩。多运动，那么你就会更健康。", false]], "back_instruction": ["回答时每个句子都要以'假如'开头，并且包含'那么'。"], "nli_scores": ["neutral"]}
{"instruction": "- 每个句子都以“当……时……”的结构展开。", "eval_func": [["def evaluate(response):\n    sentences = response.split('。')\n    for sentence in sentences:\n        if sentence.strip() == '':\n            continue\n        if not sentence.startswith('当') or '时' not in sentence:\n            return False\n    return True", 1.0, [["我喜欢在早上喝咖啡。当我吃早餐时，我会看新闻。", false], ["当我早上起床时，我会先刷牙。我喜欢喝咖啡。", false], ["当我早上起床时，我会先刷牙。当我吃早餐时，我喜欢喝咖啡。", true], ["当我早上起床时，我会先刷牙。当我吃早餐时，我喜欢喝咖啡。当我工作时，我会集中注意力。", true], ["当我早上起床时，我会先刷牙。当我吃早餐时，我喜欢喝咖啡。当我工作时，我会集中注意力。当我休息时，我会看书。", true]]]], "cases": [["我喜欢在早上喝咖啡。当我吃早餐时，我会看新闻。", false], ["当我早上起床时，我会先刷牙。我喜欢喝咖啡。", false], ["当我早上起床时，我会先刷牙。当我吃早餐时，我喜欢喝咖啡。", true], ["当我早上起床时，我会先刷牙。当我吃早餐时，我喜欢喝咖啡。当我工作时，我会集中注意力。", true], ["当我早上起床时，我会先刷牙。当我吃早餐时，我喜欢喝咖啡。当我工作时，我会集中注意力。当我休息时，我会看书。", true]], "back_instruction": ["回答时，每个句子都必须以'当'开头，并且包含'时'。"], "nli_scores": ["neutral"]}
{"instruction": "- 每个句子都以“只要……就……”的结构展开。", "eval_func": [["def evaluate(response):\n    sentences = response.split('。')\n    for sentence in sentences:\n        if sentence.strip():  # 忽略空句子\n            if not sentence.startswith('只要') or '就' not in sentence:\n                return False\n    return True", 1.0, [["只要努力学习，就能取得好成绩。只要坚持锻炼，就能保持健康。", true], ["只要努力学习，就能取得好成绩。坚持锻炼，就能保持健康。", false], ["只要努力学习，就能取得好成绩。", true], ["只要努力学习，就能取得好成绩。只要坚持锻炼，就能保持健康。只要饮食均衡，就能增强免疫力。", true], ["只要努力学习，就能取得好成绩。只要坚持锻炼，就能保持健康。饮食均衡，就能增强免疫力。", false]]]], "cases": [["只要努力学习，就能取得好成绩。只要坚持锻炼，就能保持健康。", true], ["只要努力学习，就能取得好成绩。坚持锻炼，就能保持健康。", false], ["只要努力学习，就能取得好成绩。", true], ["只要努力学习，就能取得好成绩。只要坚持锻炼，就能保持健康。只要饮食均衡，就能增强免疫力。", true], ["只要努力学习，就能取得好成绩。只要坚持锻炼，就能保持健康。饮食均衡，就能增强免疫力。", false]], "back_instruction": ["回答时每个句子都必须以'只要'开头，并且包含'就'。"], "nli_scores": ["neutral"]}
{"instruction": "- 每个句子都以“无论……都……”的结构展开。", "eval_func": [["def evaluate(response):\n    sentences = response.split('。')\n    for sentence in sentences:\n        if sentence.strip():  # 忽略空句子\n            if not sentence.startswith('无论') or '都' not in sentence:\n                return False\n    return True", 1.0, [["无论天气如何，我们都要去上班。我们要坚持。", false], ["无论天气如何，我们都要去上班。无论遇到什么困难，我们都要坚持。无论结果如何，我们都要努力。", true], ["无论天气如何，我们都要去上班。", true], ["无论天气如何，我们都要去上班。无论遇到什么困难，我们都要坚持。", true], ["无论天气如何，我们都要去上班。无论遇到什么困难，我们要坚持。", false]]]], "cases": [["无论天气如何，我们都要去上班。我们要坚持。", false], ["无论天气如何，我们都要去上班。无论遇到什么困难，我们都要坚持。无论结果如何，我们都要努力。", true], ["无论天气如何，我们都要去上班。", true], ["无论天气如何，我们都要去上班。无论遇到什么困难，我们都要坚持。", true], ["无论天气如何，我们都要去上班。无论遇到什么困难，我们要坚持。", false]], "back_instruction": ["回答时每个句子都要以'无论'开头，并且包含'都'。"], "nli_scores": ["neutral"]}
{"instruction": "- 每个句子都以“即使……也……”的结构展开。", "eval_func": [["def evaluate(response):\n    sentences = response.split('。')\n    for sentence in sentences:\n        if sentence.strip():  # 忽略空句子\n            if not sentence.startswith('即使') or '也' not in sentence:\n                return False\n    return True", 1.0, [["即使下雨了，我们也要去跑步。即使很冷，我们也要锻炼。", true], ["即使天气不好，我们也要去上班。即使很累，我们也要坚持。", true], ["即使天气不好，我们也要去上班。我们要坚持。", false], ["即使很累，我们也要坚持。即使遇到困难，我们也不能放弃。", true]]]], "cases": [["即使下雨了，我们也要去跑步。即使很冷，我们也要锻炼。", true], ["即使天气不好，我们也要去上班。即使很累，我们也要坚持。", true], ["即使天气不好，我们也要去上班。我们要坚持。", false], ["即使很累，我们也要坚持。即使遇到困难，我们也不能放弃。", true]], "back_instruction": ["回答时，每个句子都必须以'即使'开头，并且包含'也'。"], "nli_scores": ["neutral"]}
{"instruction": "- 每个句子都以“因为……所以……”的结构展开。", "eval_func": [["def evaluate(response):\n    sentences = response.split('。')\n    for sentence in sentences:\n        if sentence.strip():  # 忽略空句子\n            if not sentence.startswith('因为') or '所以' not in sentence:\n                return False\n    return True", 1.0, [["因为我喜欢编程，所以我每天都写代码。因为我喜欢学习，所以我每天都看书。", true], ["因为我喜欢编程，所以我每天都写代码。", true], ["因为天气很好，所以我们去公园散步。我们在公园里玩得很开心。", false], ["因为天气很好，所以我们去公园散步。因为我饿了，所以我吃了一个苹果。", true], ["因为我喜欢编程，所以我每天都写代码。每天写代码让我很开心。", false]]]], "cases": [["因为我喜欢编程，所以我每天都写代码。因为我喜欢学习，所以我每天都看书。", true], ["因为我喜欢编程，所以我每天都写代码。", true], ["因为天气很好，所以我们去公园散步。我们在公园里玩得很开心。", false], ["因为天气很好，所以我们去公园散步。因为我饿了，所以我吃了一个苹果。", true], ["因为我喜欢编程，所以我每天都写代码。每天写代码让我很开心。", false]], "back_instruction": ["回答时每个句子都要以'因为'开头，并且包含'所以'。"], "nli_scores": ["neutral"]}
