{"instruction": "- 请以“根据我的理解”开头。", "eval_func": [["def evaluate(response):\n    return response.startswith('根据我的理解')", 1.0]], "cases": [["从我的角度来看，这个问题的答案是正确的。", false], ["根据我的理解，这个问题的答案需要进一步讨论。", true], ["根据我的理解，这个问题的答案是错误的。", true], ["根据我的理解，这个问题的答案是正确的。", true], ["我认为这个问题的答案是正确的。", false]]}
{"instruction": "- 请以“从技术角度来看”开头。", "eval_func": [["def evaluate(response):\n    return response.startswith('从技术角度来看')", 1.0]], "cases": [["从技术角度来看，这个问题可以通过优化算法来解决。", true], ["我们可以从技术角度来看待这个问题。", false], ["从技术角度来看这个问题，我们需要更多的数据。", true], ["从技术角度来看，Python是一种非常强大的编程语言。", true], ["技术上来说，这个问题有很多解决方案。", false]]}
{"instruction": "- 请以“根据现有数据”开头。", "eval_func": [["def evaluate(response):\n    return response.startswith('根据现有数据')", 1.0]], "cases": [["现有数据表明，我们需要进一步分析。", false], ["根据现有数据，我们可以得出结论。", true], ["我们可以根据现有数据得出结论。", false], ["根据现有数据", true], ["根据现有数据，我们需要进一步分析。", true]]}
{"instruction": "- 请以“从用户反馈来看”开头。", "eval_func": [["def evaluate(response):\n    return response.startswith('从用户反馈来看')", 1.0]], "cases": [["根据用户反馈，这个产品非常受欢迎。", false], ["用户反馈显示，服务质量有待提高。", false], ["从用户反馈来看，界面设计需要改进。", true], ["从用户反馈来看，这个产品非常受欢迎。", true], ["从用户反馈来看，服务质量有待提高。", true]]}
{"instruction": "- 请以“根据最新研究”开头。", "eval_func": [["def evaluate(response):\n    return response.startswith('根据最新研究')", 1.0]], "cases": [["根据最新研究，Python是一种非常流行的编程语言。", true], ["根据最新研究，量子计算有望在未来十年内取得重大突破。", true], ["研究显示，Python在机器学习中的应用越来越广泛。", false], ["根据最新研究，人工智能技术正在迅速发展。", true], ["最新研究表明，Python在数据科学领域非常受欢迎。", false]]}
{"instruction": "- 整个回答用括号包裹。", "eval_func": [["def evaluate(response):\n    # 检查字符串是否以括号开头和结尾\n    if response.startswith('(') and response.endswith(')'):\n        return True\n    return False", 1.0]], "cases": [["(这是一个测试。)", true], ["(这是一个(嵌套)测试。)", true]]}
{"instruction": "- 回答的每个句子都以感叹号结尾。", "eval_func": [["def evaluate(response):\n    sentences = response.split('。')\n    for sentence in sentences:\n        if sentence and not sentence.endswith('！'):\n            return False\n    return True", 1.0]], "cases": [["你好！今天天气很好！我们去公园吧！", true], ["这是一个测试！每个句子都要以感叹号结尾！", true], ["请注意！所有句子必须以感叹号结尾！否则不符合要求！", true]]}
{"instruction": "- 回答的每个句子都用分号分隔。", "eval_func": [["def evaluate(response):\n    sentences = response.split('；')\n    for sentence in sentences:\n        if not sentence.strip():\n            return False\n    return True", 1.0]], "cases": [["这是一个测试。每个句子都用分号分隔；", false], ["这是一个测试；每个句子都用分号分隔；；", false], ["这是一个测试；每个句子都用分号分隔；这是另一个句子", true], ["这是一个测试；每个句子都用分号分隔； ；", false], ["这是一个测试；每个句子都用分号分隔", true]]}
{"instruction": "- 回答必须包含至少两个段落。", "eval_func": [["def evaluate(response):\n    # 将输入字符串按段落分割\n    paragraphs = response.split('\\n')\n    # 过滤掉空段落\n    non_empty_paragraphs = [p for p in paragraphs if p.strip()]\n    # 检查非空段落的数量是否至少为2\n    return len(non_empty_paragraphs) >= 2", 1.0]], "cases": [["这是第一段。\n\n\n这是第二段。", true], ["这是第一段。\n\n这是第二段。", true], ["这是第一段。\n这是第二段。", true], ["这是第一段。\n\n", false], ["这是唯一的一段。", false]]}
{"instruction": "- 每个段落至少包含四句话。", "eval_func": [["def evaluate(response):\n    paragraphs = response.split('\\n')\n    for paragraph in paragraphs:\n        sentences = paragraph.split('。')\n        # 去除空句子\n        sentences = [s for s in sentences if s.strip()]\n        if len(sentences) < 4:\n            return False\n    return True", 1.0]], "cases": [["这是第一段。这段话有四句话。每句话都以句号结尾。这样就符合要求。\n这是第二段。这段话也有四句话。每句话都以句号结尾。这样也符合要求。\n这是第三段。这段话也有四句话。每句话都以句号结尾。这样也符合要求。", true], ["这是第一段。这段话有四句话。每句话都以句号结尾。这样就符合要求。\n这是第二段。这段话有四句话。每句话都以句号结尾。这样也符合要求。\n这是第三段。这段话有五句话。每句话都以句号结尾。这样也符合要求。", true], ["这是第一段。这段话有四句话。每句话都以句号结尾。这样就符合要求。\n这是第二段。这段话也有四句话。每句话都以句号结尾。这样也符合要求。", true]]}
{"instruction": "- 回答中必须包含一个列表，列表中至少有三项。", "eval_func": [["def evaluate(response):\n    import re\n    # 使用正则表达式查找列表\n    pattern = re.compile(r'\\[(.*?)\\]')\n    matches = pattern.findall(response)\n    for match in matches:\n        # 分割列表项并去除空格\n        items = [item.strip() for item in match.split(',')]\n        # 检查列表项数量是否至少为三项\n        if len(items) >= 3:\n            return True\n    return False", 1.0]], "cases": [["以下是我的建议：[苹果, 香蕉, 橙子]", true], ["这是一个列表：[猫, 狗, 鸟, 鱼]", true], ["请注意：[1, 2]", false], ["没有列表的回复。", false], ["包含一个列表：[红色, 绿色, 蓝色]", true]]}
{"instruction": "- 回答中必须包含一个引用，引用的内容至少有两句话。", "eval_func": [["def evaluate(response):\n    import re\n    # 正则表达式匹配引号中的内容\n    quotes = re.findall(r'“([^”]+)”', response)\n    for quote in quotes:\n        # 检查引用内容是否包含至少两句话\n        if len(re.findall(r'。', quote)) >= 1:\n            return True\n    return False", 1.0]], "cases": [["这是一个测试回复。“这是一个引用句子。这是第二个句子。” “这是另一个引用句子。”", true], ["这是一个测试回复。“这是一个引用句子。这是第二个句子。” 另外的内容。", true], ["这是一个测试回复。“这是一个引用句子。这是第二个句子。”", true], ["这是一个测试回复。没有引用。", false]]}
{"instruction": "- 回答中必须包含一个问题，并且问题后面至少有两句话的解释。", "eval_func": [["def evaluate(response):\n    import re\n    # 匹配一个问题（以问号结尾）\n    question_pattern = r'[^？]*？'\n    # 匹配至少两句话（以句号结尾）\n    explanation_pattern = r'[^。]*。[^。]*。'\n    # 查找问题\n    question_match = re.search(question_pattern, response)\n    if not question_match:\n        return False\n    # 查找问题后的解释\n    explanation_match = re.search(explanation_pattern, response[question_match.end():])\n    return bool(explanation_match)", 1.0]], "cases": [["你今天过得怎么样？我今天过得很好。天气也很不错。", true], ["你喜欢编程吗？编程可以锻炼逻辑思维。", false], ["我今天过得很好。天气也很不错。", false], ["你喜欢编程吗？编程可以锻炼逻辑思维。它也能提高解决问题的能力。", true], ["你今天过得怎么样？", false]]}
{"instruction": "- 回答必须包含至少三个段落。", "eval_func": [["def evaluate(response):\n    # 将输入字符串按段落分割\n    paragraphs = response.split('\\n')\n    # 过滤掉空段落\n    non_empty_paragraphs = [p for p in paragraphs if p.strip()]\n    # 检查非空段落的数量是否至少为3\n    return len(non_empty_paragraphs) >= 3", 1.0]], "cases": [["第一段。\n\n\n第二段。\n\n\n第三段。", true], ["这是第一段。\n\n这是第二段。\n\n这是第三段。", true], ["段落一。\n\n段落二。\n\n段落三。\n\n段落四。", true]]}
{"instruction": "- 每个段落至少包含两句话。", "eval_func": [["def evaluate(response):\n    paragraphs = response.split('\\n')\n    for paragraph in paragraphs:\n        sentences = paragraph.split('。')\n        # 过滤掉空句子\n        sentences = [s for s in sentences if s.strip()]\n        if len(sentences) < 2:\n            return False\n    return True", 1.0]], "cases": [["这是第一段。这段有两句话。\n这是第二段。这段也有两句话\n这是第三段。", false], ["这是第一段。这段有两句话。\n这是第二段。这段也有两句话。", true], ["这是第一段。这段有两句话。这是第三句。", true], ["这是第一段。这段有两句话。\n这是第二段。", false], ["这是第一段。这段有两句话。\n这是第二段。这段也有两句话。\n这是第三段。这段也有两句话。", true]]}
{"instruction": "- 回答中必须包含一个列表，列表中至少有三项。", "eval_func": [["def evaluate(response):\n    import re\n    # 使用正则表达式查找列表\n    pattern = re.compile(r'\\[(.*?)\\]')\n    matches = pattern.findall(response)\n    for match in matches:\n        # 分割列表项并去除空格\n        items = [item.strip() for item in match.split(',')]\n        # 检查是否至少有三项\n        if len(items) >= 3:\n            return True\n    return False", 1.0]], "cases": [["以下是我的建议：[第一项, 第二项, 第三项]", true], ["没有列表的回复", false], ["请参考以下列表：[一, 二]", false], ["列表：[1, 2, 3, 4]", true], ["这是一个包含三项的列表：[苹果, 香蕉, 橙子]", true]]}
{"instruction": "- 回答必须包含至少两个段落。", "eval_func": [["def evaluate(response):\n    # 将输入字符串按段落分割\n    paragraphs = response.split('\\n')\n    # 过滤掉空段落\n    non_empty_paragraphs = [p for p in paragraphs if p.strip()]\n    # 检查非空段落的数量是否至少为2\n    return len(non_empty_paragraphs) >= 2", 1.0]], "cases": [["这是第一个段落。\n\n\n这是第二个段落。", true], ["这是第一个段落。\n\n这是第二个段落。", true], ["这是第一个段落。\n这是第二个段落。", true]]}
{"instruction": "- 回答必须包含至少三个段落。", "eval_func": [["def evaluate(response):\n    # 将输入字符串按段落分割\n    paragraphs = response.split('\\n')\n    # 过滤掉空段落\n    non_empty_paragraphs = [p for p in paragraphs if p.strip()]\n    # 检查非空段落的数量是否至少为3\n    return len(non_empty_paragraphs) >= 3", 1.0]], "cases": [["这是第一段。\n\n这是第二段。\n\n这是第三段。", true], ["段落一。\n\n段落二。\n\n段落三。\n\n段落四。", true], ["第一段。\n\n\n第二段。\n\n\n第三段。", true]]}
{"instruction": "- 每个段落至少包含四句话。", "eval_func": [["def evaluate(response):\n    paragraphs = response.split('\\n')\n    for paragraph in paragraphs:\n        sentences = paragraph.split('。')\n        # 去除空句子\n        sentences = [s for s in sentences if s.strip()]\n        if len(sentences) < 4:\n            return False\n    return True", 1.0]], "cases": [["这是第一段。这段话有四句话。每句话都以句号结尾。这样就符合要求。\n这是第二段。这段话也有四句话。每句话都以句号结尾。这样也符合要求。", true], ["这是第一段。这段话有四句话。每句话都以句号结尾。这样就符合要求。\n这是第二段。这段话有四句话。每句话都以句号结尾。这样也符合要求。\n这是第三段。这段话有四句话。每句话都以句号结尾。这样也符合要求。\n这是第四段。这段话有四句话。每句话都以句号结尾。这样也符合要求。", true], ["这是第一段。这段话有四句话。每句话都以句号结尾。这样就符合要求。\n这是第二段。这段话也有四句话。每句话都以句号结尾。这样也符合要求。\n这是第三段。这段话有五句话。每句话都以句号结尾。这样也符合要求。", true]]}
{"instruction": "- 回答中每个句子至少包含一个逗号。", "eval_func": [["def evaluate(response):\n    sentences = response.split('。')\n    for sentence in sentences:\n        if sentence and '，' not in sentence:\n            return False\n    return True", 1.0]], "cases": [["这是一个测试，看看是否符合要求，确保每个句子都有逗号。", true], ["这是一个测试，看看是否符合要求。这是第二个句子，依然符合要求。", true], ["这是一个测试，看看是否符合要求。", true]]}
{"instruction": "- 回答中每段话的长度不超过50个字符。", "eval_func": [["def evaluate(response):\n    # 将输入字符串按段落分割\n    paragraphs = response.split('\\n')\n    # 遍历每个段落，检查其长度是否超过50个字符\n    for paragraph in paragraphs:\n        if len(paragraph) > 50:\n            return False\n    return True", 1.0]], "cases": [["短段落。\n另一个短段落。", true], ["这是一个测试段落。\n这是另一个测试段落。", true], ["这是一个测试段落。\n这是另一个测试段落。\n这是第三个测试段落。", true], ["这是一个测试段落，它的长度超过了五十个字符，所以应该返回False。", true], ["这是一个测试段落。\n这是另一个测试段落，它的长度超过了五十个字符，所以应该返回False。", true]]}
{"instruction": "- 回答中每个句子必须以感叹号结尾。", "eval_func": [["def evaluate(response):\n    sentences = response.split('。')\n    for sentence in sentences:\n        if sentence and not sentence.endswith('！'):\n            return False\n    return True", 1.0]], "cases": [["你好！今天天气真好。我们去公园吧！", false], ["你好。", false], ["你好！今天天气真好！我们去公园吧！", true], ["这是一个测试！每个句子都要以感叹号结尾！", true], ["你好！", true], ["这是一个测试！每个句子都要以感叹号结尾。", false]]}
{"instruction": "- 回答中每个段落必须包含至少一个数字。", "eval_func": [["def evaluate(response):\n    paragraphs = response.split('\\n')\n    for paragraph in paragraphs:\n        if not any(char.isdigit() for char in paragraph):\n            return False\n    return True", 1.0]], "cases": [["这是第一段，没有数字。\n这是第二段，包含数字2。", false], ["段落1有数字1。\n段落2有数字2。\n段落3有数字3。", true], ["这是第一段，包含数字1。\n这是第二段，包含数字2。", true], ["第一段有数字123。\n第二段也有数字456。\n第三段有789。", true], ["第一段没有数字。\n第二段也没有数字。", false]]}
{"instruction": "- 请在回答的每个段落后加上“段落结束”。", "eval_func": [["def evaluate(response):\n    paragraphs = response.split('段落结束')\n    # 去掉最后一个空字符串，因为最后一个'段落结束'后面没有内容\n    if paragraphs[-1] == '':\n        paragraphs = paragraphs[:-1]\n    for paragraph in paragraphs:\n        if not paragraph.strip():\n            return False\n    return True", 1.0]], "cases": [["这是第一段。段落结束这是第二段。段落结束", true], ["这是第一段。段落结束这是第二段。", true], ["这是第一段。段落结束这是第二段。段落结束这是第三段。", true], ["这是第一段。段落结束这是第二段。段落结束这是第三段。段落结束", true], ["这是唯一一段。段落结束", true]]}
{"instruction": "- 请在回答的每个段落前加上“段落开始”。", "eval_func": [["def evaluate(response):\n    paragraphs = response.split('\\n')\n    for paragraph in paragraphs:\n        if paragraph.strip() and not paragraph.startswith('段落开始'):\n            return False\n    return True", 1.0]], "cases": [["段落开始 这是第一段。\n段落开始 这是第二段。", true], ["段落开始 这是第一段。\n段落开始 这是第二段。\n段落开始 这是第三段。", true], ["段落开始 这是第一段。\n\n段落开始 这是第二段。", true]]}
{"instruction": "- 回答中包含关键词“详细”。", "eval_func": [["def evaluate(response):\n    return '详细' in response", 1.0]], "cases": [["详细描述一下这个过程。", true], ["请给我一个解释。", false], ["请给我一个详细的解释。", true], ["这个问题需要详细说明。", true], ["这个问题需要说明。", false], ["描述一下这个过程。", false]]}
{"instruction": "- 回答中包含关键词“简洁”。", "eval_func": [["def evaluate(response):\n    return '简洁' in response", 1.0]], "cases": [["这个回答非常简洁。", true], ["这个回答非常详细。", false], ["请保持回答简洁明了。", true], ["回答应该详细。", false], ["回答应该简洁。", true]]}
{"instruction": "- 回答中包含关键词“概述”。", "eval_func": [["def evaluate(response):\n    return '概述' in response", 1.0]], "cases": [["这是一个概述。", true], ["这是一个详细的描述。", false], ["概述部分在这里。", true], ["这段文字没有包含关键字。", false], ["我们需要一个概述来开始。", true]]}
{"instruction": "- 回答中包含关键词“总结”。", "eval_func": [["def evaluate(response):\n    return '总结' in response", 1.0]], "cases": [["这是一个总结。", true], ["总结一下，我们需要更多的时间。", true], ["这是一个简单的描述。", false], ["总结：这是一个重要的发现。", true], ["请提供更多的细节。", false]]}
{"instruction": "- 回答中包含关键词“要点”。", "eval_func": [["def evaluate(response):\n    return '要点' in response", 1.0]], "cases": [["总结如下：", false], ["要点已经在上文提到。", true], ["这篇文章的要点是...", true], ["请注意以下要点：", true], ["这篇文章的重点是...", false]]}
{"instruction": "- 回答中每个段落至少包含2个句子。", "eval_func": [["def evaluate(response):\n    paragraphs = response.split('\\n')\n    for paragraph in paragraphs:\n        sentences = paragraph.split('。')\n        # 过滤掉空句子\n        sentences = [s for s in sentences if s.strip()]\n        if len(sentences) < 2:\n            return False\n    return True", 1.0]], "cases": [["这是第一段。这段有两个句子。\n这是第二段。这段也有两个句子。", true], ["这是第一段。这段有两个句子。\n这是第二段。这段也有两个句子。\n这是第三段。这段也有两个句子。", true], ["这是第一段。这段有两个句子。\n这是第二段。这段也有两个句子。\n这是第三段。这段也有两个句子。\n这是第四段。这段也有两个句子。", true]]}
{"instruction": "- 回答中每个句子都包含一个逗号。", "eval_func": [["def evaluate(response):\n    sentences = response.split('。')\n    for sentence in sentences:\n        if sentence and '，' not in sentence:\n            return False\n    return True", 1.0]], "cases": [["这是一个测试。看看是否符合要求。", false], ["这个句子没有逗号。这个句子有，逗号。", false], ["每个句子都包含一个逗号，这样才符合要求。", true], ["这是一个测试，看看是否符合要求，这样才行。", true], ["这是一个测试，看看是否符合要求。", true]]}
{"instruction": "- 回答中每个段落都以一个问号结尾。", "eval_func": [["def evaluate(response):\n    paragraphs = response.split('\\n')\n    for paragraph in paragraphs:\n        if not paragraph.endswith('？'):\n            return False\n    return True", 1.0]], "cases": [["你好吗？\n今天天气怎么样？", true], ["你好吗？\n今天天气怎么样？\n我们去哪里？", true], ["你好吗？\n今天天气怎么样。\n我们去哪里？", false], ["你好吗？\n今天天气怎么样？\n我们去哪里", false]]}
{"instruction": "- 请用中文回答，不能包含任何数字。", "eval_func": [["def evaluate(response):\n    for char in response:\n        if '0' <= char <= '9':\n            return False\n    return True", 1.0]], "cases": [["今天是星期五。", true], ["这是一个测试。", true], ["你好，世界！", true]]}
{"instruction": "- 请用中文回答，不能包含任何标点符号。", "eval_func": [["def evaluate(response):\n    # 检查是否包含任何标点符号\n    for char in response:\n        if char in '，。！？；：‘’“”（）《》【】、——……':\n            return False\n    return True", 1.0]], "cases": [["没有标点符号的句子", true], ["这是一个测试", true], ["你好世界", true]]}
{"instruction": "- 回复的句子数量不少于10句。", "eval_func": [["def evaluate(response):\n    # 将输入字符串按句号、问号和感叹号分割\n    sentences = [s for s in re.split('[。！？]', response) if s.strip()]\n    # 检查句子数量是否不少于10句\n    return len(sentences) >= 10", 1.0]], "cases": [["这是第一句。这是第二句。这是第三句。这是第四句。这是第五句。", false], ["这是第一句。这是第二句。这是第三句。这是第四句。这是第五句。这是第六句。这是第七句。这是第八句。这是第九句。这是第十句。", true], ["这是第一句。这是第二句。这是第三句。这是第四句。这是第五句。这是第六句。这是第七句。这是第八句。这是第九句。这是第十句。这是第十一句。", true], ["这是第一句。这是第二句。这是第三句。这是第四句。这是第五句。这是第六句。这是第七句。这是第八句。这是第九句。", false], ["这是第一句！这是第二句？这是第三句。这是第四句。这是第五句。这是第六句。这是第七句。这是第八句。这是第九句。这是第十句。", true]]}
{"instruction": "- 回复的段落数量不少于3段。", "eval_func": [["def evaluate(response):\n    # 将输入字符串按段落分割\n    paragraphs = response.split('\\n')\n    # 过滤掉空段落\n    paragraphs = [p for p in paragraphs if p.strip()]\n    # 检查段落数量是否不少于3段\n    return len(paragraphs) >= 3", 1.0]], "cases": [["这是第一段。\n\n这是第二段。\n\n这是第三段。", true], ["这是第一段。\n这是第二段。\n这是第三段。", true], ["段落一。\n\n段落二。\n\n段落三。\n\n段落四。", true], ["这是第一段。\n\n这是第二段。\n\n这是第三段。\n\n这是第四段。", true]]}
{"instruction": "- 回答中不能使用问号（可以使用其他标点符号）。", "eval_func": [["def evaluate(response):\n    return '？' not in response", 1.0]], "cases": [["你好吗？", false], ["请告诉我你的名字。", true], ["天气真好。", true], ["这是一个测试。", true], ["你今天过得怎么样？", false]]}
{"instruction": "- 回答中每个句子必须以句号结尾。", "eval_func": [["def evaluate(response):\n    sentences = response.split('。')\n    for sentence in sentences[:-1]:\n        if not sentence.strip():\n            return False\n    return response.endswith('。')", 1.0]], "cases": [["这是一个测试。这是另一个测试。再来一个测试", false], ["这是一个测试。这是另一个测试。再来一个测试。", true], ["这是一个测试。这是另一个测试", false], ["这是一个测试。这是另一个测试。", true]]}
{"instruction": "- 回答中不能使用感叹号（可以使用其他标点符号）。", "eval_func": [["def evaluate(response):\n    return '！' not in response", 1.0]], "cases": [["这是一个测试！", false], ["你好，世界。", true], ["这是一个测试。", true], ["请注意，这里有感叹号！", false], ["你好，世界！", false], ["请注意，这里没有感叹号。", true]]}
{"instruction": "- 回答中不能包含任何数字。", "eval_func": [["def evaluate(response):\n    for char in response:\n        if char.isdigit():\n            return False\n    return True", 1.0]], "cases": [["没有数字的句子。", true], ["纯文字。", true], ["这是一个测试。", true]]}
{"instruction": "- 回答中不能使用感叹号。", "eval_func": [["def evaluate(response):\n    return '!' not in response", 1.0]], "cases": [["你好，世界。", true], ["你好，世界！", true], ["请确保没有感叹号！", true], ["请确保没有感叹号。", true], ["这是一个测试！", true], ["这是一个测试。", true]]}
{"instruction": "- 回答中包含的句子数量不少于3句。", "eval_func": [["def evaluate(response):\n    # 将输入字符串按句号、问号和感叹号分割\n    sentences = [s for s in re.split(r'[。！？]', response) if s.strip()]\n    # 检查句子数量是否不少于3句\n    return len(sentences) >= 3", 1.0]], "cases": [["这是第一句。这是第二句。这是第三句。", true], ["这是第一句。这是第二句", false], ["这是第一句！这是第二句？这是第三句。", true], ["这是第一句。这是第二句。这是第三句。这是第四句。", true], ["这是第一句。", false]]}
{"instruction": "- 回答中包含的标点符号数量不少于5个。", "eval_func": [["def evaluate(response):\n    # 定义标点符号列表\n    punctuation_marks = ['。', '，', '！', '？', '：', '；', '、', '“', '”', '‘', '’', '（', '）', '《', '》', '——', '……', '——', '【', '】', '『', '』', '「', '」', '﹃', '﹄', '〔', '〕', '〈', '〉', '﹏', '﹋', '﹌', '﹉', '﹊', '﹍', '﹎', '﹏', '﹐', '﹑', '﹒', '﹔', '﹕', '﹖', '﹗', '﹙', '﹚', '﹛', '﹜', '﹝', '﹞', '﹟', '﹠', '﹡', '﹢', '﹣', '﹤', '﹥', '﹦', '﹧', '﹨', '﹩', '﹪', '﹫', '！', '＂', '＃', '＄', '％', '＆', '＇', '（', '）', '＊', '＋', '，', '－', '．', '／', '：', '；', '＜', '＝', '＞', '？', '＠', '［', '＼', '］', '＾', '＿', '｀', '｛', '｜', '｝', '～', '｟', '｠', '｢', '｣', '､', '･', 'ｦ', 'ｧ', 'ｨ', 'ｩ', 'ｪ', 'ｫ', 'ｬ', 'ｭ', 'ｮ', 'ｯ', 'ｰ', 'ｱ', 'ｲ', 'ｳ', 'ｴ', 'ｵ', 'ｶ', 'ｷ', 'ｸ', 'ｹ', 'ｺ', 'ｻ', 'ｼ', 'ｽ', 'ｾ', 'ｿ', 'ﾀ', 'ﾁ', 'ﾂ', 'ﾃ', 'ﾄ', 'ﾅ', 'ﾆ', 'ﾇ', 'ﾈ', 'ﾉ', 'ﾊ', 'ﾋ', 'ﾌ', 'ﾍ', 'ﾎ', 'ﾏ', 'ﾐ', 'ﾑ', 'ﾒ', 'ﾓ', 'ﾔ', 'ﾕ', 'ﾖ', 'ﾗ', 'ﾘ', 'ﾙ', 'ﾚ', 'ﾛ', 'ﾜ', 'ﾝ', 'ﾞ', 'ﾟ']\n    # 统计标点符号数量\n    count = sum(1 for char in response if char in punctuation_marks)\n    # 判断是否不少于5个\n    return count >= 5", 1.0]], "cases": [["测试，测试，测试，测试，测试。", true]]}
{"instruction": "- 回答中必须包含至少一个问号。", "eval_func": [["def evaluate(response):\n    return '？' in response", 1.0]], "cases": [["你吃饭了吗？我还没吃。", true], ["你觉得这个怎么样？", true], ["你今天好吗？", true]]}
{"instruction": "- 回答中不能包含任何数字。", "eval_func": [["def evaluate(response):\n    for char in response:\n        if char.isdigit():\n            return False\n    return True", 1.0]], "cases": [["纯文字", true], ["这是一个测试", true], ["没有数字的句子", true]]}
{"instruction": "- 回答中必须包含“关键”这个词，但不能超过2次。", "eval_func": [["def evaluate(response):\n    # 计算'关键'出现的次数\n    count = response.count('关键')\n    # 检查是否出现1到2次\n    return 1 <= count <= 2", 1.0]], "cases": [["这是一个包含关键字的句子。", true], ["这是一个包含关键字的句子，关键字出现了两次。", true], ["这是一个包含关键字的句子，关键字出现了三次。关键", false], ["关键关键", true], ["关键", true], ["关键关键关键", false]]}
{"instruction": "- 回答中每句话的长度不能超过15个字。", "eval_func": [["def evaluate(response):\n    sentences = response.split('。')\n    for sentence in sentences:\n        if len(sentence) > 15:\n            return False\n    return True", 1.0]], "cases": [["短句。短句。短句。", true], ["这是一个测试。每句话都不超过十五个字。", true]]}
{"instruction": "- 回答中每段不能超过3句话。", "eval_func": [["def evaluate(response):\n    # 将输入字符串按段落分割\n    paragraphs = response.split('\\n')\n    # 遍历每个段落，检查是否超过3句话\n    for paragraph in paragraphs:\n        # 将段落按句号、问号和感叹号分割\n        sentences = [s for s in re.split('[。？！]', paragraph) if s]\n        # 如果句子数量超过3，返回False\n        if len(sentences) > 3:\n            return False\n    # 如果所有段落都符合要求，返回True\n    return True", 1.0]], "cases": [["这是第一段。它有三句话。这样就符合要求。\n这是第二段。它也有三句话。依然符合要求。", true], ["这是第一段。它有三句话。这样就符合要求。\n这是第二段。它有三句话。依然符合要求。\n这是第三段。它有三句话。依然符合要求。", true], ["这是第一段。它有三句话。这样就符合要求。\n这是第二段。它有三句话。依然符合要求。\n这是第三段。它有四句话。这就不符合要求了。", true], ["这是第一段。它只有两句话。\n这是第二段。它也只有两句话。", true], ["这是第一段。它有三句话。这样就符合要求。\n这是第二段。它有四句话。这就不符合要求了。", true]]}
{"instruction": "你是一个人工智能助手，请以“作为一个人工智能助手”开头。", "eval_func": [["def evaluate(response):\n    return response.startswith('作为一个人工智能助手')", 1.0]], "cases": [["作为一个人工智能助手，我的职责是帮助你。", true], ["作为一个人工智能助手，我可以提供各种信息。", true], ["我可以帮助你解决问题，作为一个人工智能助手。", false], ["作为一个人工智能助手，我可以帮助你解决问题。", true], ["你好，我是一个人工智能助手。", false]]}
{"instruction": "整个回答用一个双引号包裹。", "eval_func": [["def evaluate(response):\n    # 检查字符串是否以双引号开头和结尾\n    if response.startswith('\"') and response.endswith('\"'):\n        return True\n    return False", 1.0]], "cases": [["\"这是一个测试。\"", true], ["\"\"", true], ["\"这是一个包含\"引号\"的测试。\"", true], ["\"这是另一个测试。\"", true]]}
{"instruction": "回答至少包含9句话。", "eval_func": [["def evaluate(response):\n    # 将输入字符串按句号、问号和感叹号分割\n    sentences = response.split('。')\n    sentences += response.split('？')\n    sentences += response.split('！')\n    # 去除空字符串\n    sentences = [s for s in sentences if s.strip()]\n    # 判断句子数量是否大于等于9\n    return len(sentences) >= 9", 1.0]], "cases": [["这是第一句话！这是第二句话？这是第三句话。这是第四句话。这是第五句话。这是第六句话。这是第七句话。这是第八句话。这是第九句话。", true], ["这是第一句话。这是第二句话。这是第三句话。", false], ["这是第一句话。这是第二句话。这是第三句话。这是第四句话。这是第五句话。这是第六句话。这是第七句话。这是第八句话。这是第九句话。这是第十句话。", true], ["这是第一句话。这是第二句话。这是第三句话。这是第四句话。这是第五句话。这是第六句话。这是第七句话。这是第八句话。这是第九句话。", true]]}
{"instruction": "回答中“策略”这个词至少出现5次。", "eval_func": [["def evaluate(response):\n    return response.count('策略') >= 5", 1.0]], "cases": [["策略策略策略策略策略", true], ["在这个项目中，我们需要一个详细的计划和执行方案。", false], ["这是一个包含策略的句子。策略是非常重要的。我们需要一个好的策略来确保成功。策略的制定需要深思熟虑。最后，我们要执行这个策略。", true], ["这是一个包含策略的句子。策略是非常重要的。我们需要一个好的策略来确保成功。策略的制定需要深思熟虑。", false], ["策略是成功的关键。没有策略，我们很难取得成功。策略的制定需要考虑很多因素。一个好的策略可以帮助我们克服困难。策略的执行同样重要。", true]]}
{"instruction": "请在回答结束后加上“附加说明:”。", "eval_func": [["def evaluate(response):\n    return response.endswith('附加说明:')", 1.0]], "cases": [["这是一个测试回复。", false], ["这是另一个测试回复。附加说明: ", false], ["请在回答结束后加上“附加说明:”。附加说明:", true], ["这是一个测试回复。附加说明:", true], ["请在回答结束后加上“附加说明:”。", false]]}
{"instruction": "回答中至少包含3个占位符（例如：[例如]）。", "eval_func": [["def evaluate(response):\n    # 计算占位符的数量\n    placeholder_count = response.count('[例如]')\n    # 检查是否至少包含3个占位符\n    return placeholder_count >= 3", 1.0]], "cases": [["这是一个包含[例如]占位符的示例，[例如]这是第二个，[例如]这是第三个。", true], ["没有占位符的示例。", false], ["这是一个包含[例如]占位符的示例，[例如]这是第二个，[例如]这是第三个，[例如]这是第四个。", true], ["[例如]占位符1，[例如]占位符2，[例如]占位符3。", true], ["这是一个包含[例如]占位符的示例，[例如]这是第二个。", false]]}
{"instruction": "请用中文回答，不能包含任何英文。", "eval_func": [["def evaluate(response):\n    # 检查输入字符串是否包含任何英文字符\n    for char in response:\n        if 'a' <= char <= 'z' or 'A' <= char <= 'Z':\n            return False\n    return True", 1.0]], "cases": [["这是一个测试。", true], ["完全没有英文字符。", true], ["你好，世界！", true]]}
{"instruction": "回答中不能使用逗号（可以使用其他标点符号）。", "eval_func": [["def evaluate(response):\n    return '，' not in response", 1.0]], "cases": [["这是另一个测试，包含逗号。", false], ["纯中文测试", true], ["没有逗号的句子。", true], ["这是一个测试", true], ["这是一个测试，包含逗号", false]]}
{"instruction": "回答中不能出现“人工智能”这个词。", "eval_func": [["def evaluate(response):\n    forbidden_word = '人工智能'\n    return forbidden_word not in response", 1.0]], "cases": [["我们讨论的是机器学习和深度学习。", true], ["这是一个测试字符串，不包含违禁词。", true], ["请确保你的回答不包含违禁词。", true]]}
{"instruction": "回答中“***”出现次数少于2次。", "eval_func": [["def evaluate(response):\n    return response.count('***') < 2", 1.0]], "cases": [["这是一个测试***。", true], ["没有星号的测试。", true], ["这是一个测试***，看看是否符合要求***，再加一个***。", false], ["这是一个测试***，看看是否符合要求。", true], ["这是一个测试***，看看是否符合要求***。", false]]}
{"instruction": "回答中句子数量不能超过5句。", "eval_func": [["def evaluate(response):\n    # 将输入字符串按句号、问号和感叹号分割\n    sentences = response.split('。')\n    sentences += response.split('？')\n    sentences += response.split('！')\n    # 去除空字符串\n    sentences = [s for s in sentences if s.strip()]\n    # 判断句子数量是否超过5个\n    return len(sentences) <= 5", 1.0]], "cases": [["这是第一句。这是第二句。这是第三句。这是第四句。这是第五句！这是第六句。", false], ["这是第一句。这是第二句。", true], ["这是第一句。这是第二句。这是第三句。这是第四句。这是第五句。这是第六句。", false]]}
{"instruction": "回答中句子数量不少于5句。", "eval_func": [["def evaluate(response):\n    # 将输入字符串按句号、问号和感叹号分割\n    sentences = response.split('。') + response.split('？') + response.split('！')\n    # 去除空字符串\n    sentences = [s for s in sentences if s.strip()]\n    # 判断句子数量是否不少于5句\n    return len(sentences) >= 5", 1.0]], "cases": [["你好吗？我很好！今天天气不错。我们去散步吧。你觉得怎么样？", true], ["你好！", false], ["这是第一句。这是第二句。这是第三句。这是第四句。这是第五句。", true]]}
{"instruction": "回答的不同段落之间用“***********”连接。", "eval_func": [["def evaluate(response):\n    # 检查是否有两个段落之间没有***********\n    paragraphs = response.split('***********')\n    for paragraph in paragraphs:\n        if '***********' in paragraph:\n            return False\n    return True", 1.0]], "cases": [["这是第一段。***********这是第二段。***********", true], ["***********这是第一段。***********这是第二段。", true], ["这是第一段。***********这是第二段。", true], ["这是第一段。***********这是第二段。***********这是第三段。", true], ["这是第一段。这是第二段。", true]]}
{"instruction": "回答中出现“提倡”这个词但是不能超过3次。", "eval_func": [["def evaluate(response):\n    # 计算'提倡'出现的次数\n    count = response.count('提倡')\n    # 判断是否在0到3次之间\n    return 0 <= count <= 3", 1.0]], "cases": [["提倡提倡提倡提倡", false], ["我们应该提倡环保。", true], ["提倡", true], ["我们提倡环保，提倡节约，提倡绿色出行。", true], ["提倡健康生活方式，提倡环保，提倡节约，提倡绿色出行。", false], ["提倡健康生活方式。", true]]}
{"instruction": "回答不多于4句话。", "eval_func": [["def evaluate(response):\n    # 将输入字符串按句号、问号和感叹号分割\n    sentences = response.split('。')\n    sentences += response.split('？')\n    sentences += response.split('！')\n    # 过滤掉空字符串\n    sentences = [s for s in sentences if s.strip()]\n    # 判断句子数量是否超过4\n    return len(sentences) <= 4", 1.0]], "cases": [["这是第一句。这是第二句。这是第三句。这是第四句。这是第五句！", false], ["这是第一句。这是第二句。这是第三句。这是第四句。这是第五句。", false]]}
{"instruction": "回答不多于6句话。", "eval_func": [["def evaluate(response):\n    # 将输入字符串按句号、问号和感叹号分割\n    sentences = response.split('。')\n    sentences += response.split('？')\n    sentences += response.split('！')\n    # 去除空字符串\n    sentences = [s for s in sentences if s.strip()]\n    # 判断句子数量是否超过6个\n    return len(sentences) <= 6", 1.0]], "cases": [["这是第一句。这是第二句。这是第三句。这是第四句。这是第五句。这是第六句。这是第七句。", false], ["这是第一句。这是第二句。这是第三句。这是第四句。这是第五句。这是第六句。这是第七句！", false]]}
{"instruction": "回答不多于8句话。", "eval_func": [["def evaluate(response):\n    # 将输入字符串按句号、问号和感叹号分割\n    sentences = response.split('。')\n    sentences += [s for part in sentences for s in part.split('？')]\n    sentences += [s for part in sentences for s in part.split('！')]\n    # 去除空字符串\n    sentences = [s for s in sentences if s.strip()]\n    # 检查句子数量是否超过8句\n    return len(sentences) <= 8", 1.0]], "cases": [["这是第一句。", true]]}
{"instruction": "回答不多于10句话。", "eval_func": [["def evaluate(response):\n    # 将输入字符串按句号、问号和感叹号分割\n    sentences = response.split('。')\n    sentences += response.split('？')\n    sentences += response.split('！')\n    # 去除空字符串\n    sentences = [s for s in sentences if s.strip()]\n    # 判断句子数量是否超过10\n    return len(sentences) <= 10", 1.0]], "cases": [["这是第一句话。", true], ["这是第一句话。这是第二句话。这是第三句话。这是第四句话。这是第五句话。这是第六句话。这是第七句话。这是第八句话。这是第九句话。这是第十句话。这是第十一句话！", false], ["这是第一句话。这是第二句话。这是第三句话。这是第四句话。这是第五句话。这是第六句话。这是第七句话。这是第八句话。这是第九句话。这是第十句话。这是第十一句话。", false]]}
{"instruction": "回答中“要点”这个词至多出现3次。", "eval_func": [["def evaluate(response):\n    # 计算'要点'出现的次数\n    count = response.count('要点')\n    # 判断是否超过3次\n    return count <= 3", 1.0]], "cases": [["这是一个测试，要点在这里。要点在这里。要点在这里。", true], ["这是一个测试，没有要点。", true], ["要点要点要点要点", false], ["要点要点要点", true], ["这是一个测试，要点在这里。要点在这里。要点在这里。要点在这里。", false]]}
{"instruction": "字数少于171个字。", "eval_func": [["def evaluate(response):\n    return len(response) < 171", 1.0]], "cases": [["这是一个测试字符串，用于检查是否遵循字数少于171个字的指令。", true], ["这是另一个测试字符串，长度刚好在171个字以内。我们需要确保这个字符串的长度不会超过171个字，以便测试evaluate函数是否能够正确识别出符合指令的情况。这个字符串的长度应该是非常接近171个字，但不会超过。", true], ["短字符串。", true]]}
{"instruction": "字数少于272个字。", "eval_func": [["def evaluate(response):\n    return len(response) < 272", 1.0]], "cases": [["这是一个非常长的测试案例，字数超过了272个字。为了确保这个测试案例确实超过了272个字，我们需要添加更多的内容。这个测试案例将继续添加更多的句子和词语，直到我们确信它的长度已经超过了272个字。现在我们可以继续添加一些无关紧要的内容，比如说天气如何，今天的天气非常好，阳光明媚，适合出去散步。我们还可以谈论一些其他的话题，比如说最近的新闻，或者是一些有趣的故事。总之，这个测试案例的目的是确保它的长度超过272个字，以便测试我们的评估函数是否能够正确地识别出不符合指令的回复。", true], ["这是一个测试案例，字数少于272个字。", true]]}
{"instruction": "字数大于373个字。", "eval_func": [["def evaluate(response):\n    # 将输入字符串转换为字符列表\n    characters = list(response)\n    # 计算字符数量\n    char_count = len(characters)\n    # 判断字符数量是否大于373\n    return char_count > 373", 1.0]], "cases": [["这是一个测试案例，字数超过373个字。为了确保这个字符串的长度超过373个字符，我们需要添加更多的内容。我们可以继续添加一些描述性的文字，确保总字数超过要求的阈值。比如，我们可以描述一下Python编程语言的特点。Python是一种解释型、面向对象、动态数据类型的高级程序设计语言。它由Guido van Rossum于1989年底发明，第一个公开发行版发行于1991年。Python的设计哲学强调代码的可读性和简洁的语法，使得程序员能够用更少的代码表达想法。Python支持多种编程范式，包括面向对象、过程化编程和函数式编程。它拥有丰富的标准库和强大的第三方库，使得Python在Web开发、数据分析、人工智能、科学计算等领域得到了广泛应用。Python的社区非常活跃，开发者们不断贡献新的库和工具，推动了Python生态系统的不断发展。总之，Python是一种非常强大且易于学习的编程语言，适合初学者和经验丰富的开发者使用。通过这些描述，我们可以确保这个字符串的长度超过373个字符，从而满足评估函数的要求。", true]]}
{"instruction": "字数大于524个字。", "eval_func": [["def evaluate(response):\n    # 将输入字符串转换为字符列表\n    characters = list(response)\n    # 计算字符数量\n    char_count = len(characters)\n    # 判断字符数量是否大于524\n    return char_count > 524", 1.0]], "cases": [["这是一个测试案例，字数超过524个字。为了确保这个字符串的长度超过524个字符，我们需要添加更多的内容。我们可以继续添加一些描述性的文字，确保总字数超过"]]}
{"instruction": "字数小于426个字。", "eval_func": [["def evaluate(response):\n    # 将输入字符串转换为字符列表\n    characters = list(response)\n    # 计算字符数量\n    char_count = len(characters)\n    # 判断字符数量是否大于524\n    return char_count < 426", 1.0]], "cases": [["这是一个测试案例，字数超过524个字。为了确保这个字符串的长度超过524个字符，我们需要添加更多的内容。我们可以继续添加一些描述性的文字，确保总字数超过"]]}
{"instruction": "字数小于169个字。", "eval_func": [["def evaluate(response):\n    # 将输入字符串转换为字符列表\n    characters = list(response)\n    # 计算字符数量\n    char_count = len(characters)\n    # 判断字符数量是否大于524\n    return char_count < 169", 1.0]], "cases": [["这是一个测试案例，字数超过524个字。为了确保这个字符串的长度超过524个字符，我们需要添加更多的内容。我们可以继续添加一些描述性的文字，确保总字数超过"]]}
{"instruction": "字数大于899个字。", "eval_func": [["def evaluate(response):\n    # 将输入字符串转换为字符列表\n    characters = list(response)\n    # 计算字符数量\n    char_count = len(characters)\n    # 判断字符数量是否大于524\n    return char_count > 899", 1.0]], "cases": [["这是一个测试案例，字数超过524个字。为了确保这个字符串的长度超过524个字符，我们需要添加更多的内容。我们可以继续添加一些描述性的文字，确保总字数超过"]]}